services:
  postgres:
    image: pgvector/pgvector:pg17
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      TZ: Asia/Seoul
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: dungeondb
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init-vector.sql:/docker-entrypoint-initdb.d/init-vector.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      TZ: Asia/Seoul
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ./mongo/data:/data/db
      - ./mongo/init.js:/docker-entrypoint-initdb.d/init.js

  valkey-session:
    image: valkey/valkey:latest
    container_name: dgt-valkey-session
    ports:
      - "${VALKEY_SESSION_PORT}:6379"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./valkey-session/data:/data
      - "${VALKEY_SESSION_CONFIG_PATH}:/etc/valkey/valkey.conf"
    command: ["valkey-server", "/etc/valkey/valkey.conf"]

  valkey-cache:
    image: valkey/valkey:latest
    container_name: dgt-valkey-cache
    ports:
      - "${VALKEY_CACHE_PORT}:6379"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./valkey-cache/data:/data
      - "${VALKEY_CACHE_CONFIG_PATH}:/etc/valkey/valkey.conf"
    command: ["valkey-server", "/etc/valkey/valkey.conf"]

  dungeontalk-ai:
    build: ../dungeontalk-mvp
    container_name: dgt-ai-service
    ports:
      - "${AI_SERVICE_PORT}:8001"
    environment:
      TZ: Asia/Seoul
      AI_SERVICE_PORT: ${AI_SERVICE_PORT}
      LLM_PROVIDER: ${LLM_PROVIDER}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      DEEPSEEK_MODEL: ${DEEPSEEK_MODEL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      USE_REMOTE_EMBEDDINGS: ${USE_REMOTE_EMBEDDINGS}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../dungeontalk-mvp/documents:/app/documents
      - ../dungeontalk-mvp/vectorstore_openai:/app/vectorstore_openai